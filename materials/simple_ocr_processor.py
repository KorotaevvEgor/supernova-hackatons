#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ü—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π OCR –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
–†–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ, –±–µ–∑ –∑–∞–≤–∏—Å–∞–Ω–∏–π, —Å –±–∞–∑–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ç–µ–∫—Å—Ç–∞
"""

import logging
import io
from PIL import Image, ImageEnhance
from typing import Dict, List, Optional
import numpy as np
import re

logger = logging.getLogger(__name__)

class SimpleOCRProcessor:
    """–ü—Ä–æ—Å—Ç–æ–π –∏ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π OCR –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å fallback –Ω–∞ Tesseract"""
    
    def __init__(self):
        self.ocr_engine = None
        self.ocr_type = None  # 'paddle' –∏–ª–∏ 'tesseract'
        self.is_initialized = False
    
    def _initialize_ocr(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OCR —Å fallback (–æ–¥–∏–Ω —Ä–∞–∑)"""
        if self.is_initialized:
            return
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å PaddleOCR
        try:
            from paddleocr import PaddleOCR
            logger.info("üöÄ –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ PaddleOCR...")
            
            # –ü—Ä–æ—Å—Ç–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            self.ocr_engine = PaddleOCR(lang='ru', show_log=False)
            self.ocr_type = 'paddle'
            self.is_initialized = True
            
            logger.info("‚úÖ PaddleOCR —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
            return
            
        except Exception as paddle_error:
            logger.warning(f"‚ö†Ô∏è PaddleOCR –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {str(paddle_error)}")
        
        # Fallback –Ω–∞ Tesseract
        try:
            import pytesseract
            from PIL import Image
            
            logger.info("üöÄ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ Tesseract OCR...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Tesseract
            try:
                pytesseract.get_tesseract_version()
                self.ocr_engine = pytesseract
                self.ocr_type = 'tesseract'
                self.is_initialized = True
                
                logger.info("‚úÖ Tesseract OCR —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
                return
                
            except Exception as tesseract_version_error:
                logger.error(f"Tesseract –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {str(tesseract_version_error)}")
                
        except ImportError as tesseract_import_error:
            logger.error(f"pytesseract –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {str(tesseract_import_error)}")
        except Exception as tesseract_error:
            logger.error(f"–û—à–∏–±–∫–∞ Tesseract: {str(tesseract_error)}")
        
        # –û–±–∞ –¥–≤–∏–∂–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
        raise Exception("–û–±–∞ OCR –¥–≤–∏–∂–∫–∞ (PaddleOCR –∏ Tesseract) –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    
    def _prepare_image(self, image_data: bytes) -> np.ndarray:
        """–ü—Ä–æ—Å—Ç–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img = Image.open(io.BytesIO(image_data))
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB
            if img.mode != 'RGB':
                img = img.convert('RGB')
            
            # –ü—Ä–æ—Å—Ç–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            width, height = img.size
            if width < 400 or height < 300:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤ 2 —Ä–∞–∑–∞ —Ç–æ–ª—å–∫–æ –º–∞–ª–µ–Ω—å–∫–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                new_width = width * 2
                new_height = height * 2
                img = img.resize((new_width, new_height), Image.Resampling.LANCZOS)
                logger.info(f"–£–≤–µ–ª–∏—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {width}x{height} ‚Üí {new_width}x{new_height}")
            
            # –õ–µ–≥–∫–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
            enhancer = ImageEnhance.Contrast(img)
            img = enhancer.enhance(1.2)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy array
            img_array = np.array(img)
            
            logger.info(f"–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {img_array.shape}")
            return img_array
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            img = Image.open(io.BytesIO(image_data))
            if img.mode != 'RGB':
                img = img.convert('RGB')
            return np.array(img)
    
    def process_document(self, image_data: bytes) -> Dict:
        """–ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        try:
            logger.info("üöÄ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OCR
            self._initialize_ocr()
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            processed_image = self._prepare_image(image_data)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º OCR –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–≤–∏–∂–∫–∞
            logger.info(f"üì∂ –ó–∞–ø—É—Å–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ {self.ocr_type.upper()}...")
            
            if self.ocr_type == 'paddle':
                result = self.ocr_engine.ocr(processed_image, cls=False)
            elif self.ocr_type == 'tesseract':
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º numpy array –≤ PIL Image
                from PIL import Image as PILImage
                pil_image = PILImage.fromarray(processed_image)
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –¥–ª—è Tesseract
                text = self.ocr_engine.image_to_string(pil_image, lang='rus')
                result = text
            else:
                raise Exception(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø OCR: {self.ocr_type}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            return self._process_ocr_result(result)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}")
            return {
                'success': False,
                'error': str(e),
                'raw_text': '',
                'fields': {},
                'confidence': 0
            }
    
    def _process_ocr_result(self, ocr_result) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ OCR (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ PaddleOCR –∏ Tesseract)"""
        try:
            if not ocr_result:
                return {
                    'success': False,
                    'error': '–ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç OCR',
                    'raw_text': '',
                    'fields': {},
                    'confidence': 0
                }
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ OCR
            if self.ocr_type == 'tesseract':
                # Tesseract –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
                if isinstance(ocr_result, str) and ocr_result.strip():
                    full_text = ocr_result.strip()
                    avg_confidence = 75  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–ª—è Tesseract
                    ocr_service = 'Tesseract OCR'
                else:
                    return {
                        'success': False,
                        'error': '–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –æ—Ç Tesseract',
                        'raw_text': '',
                        'fields': {},
                        'confidence': 0
                    }
                    
            elif self.ocr_type == 'paddle':
                # PaddleOCR –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏
                recognized_texts = []
                confidences = []
                
                if isinstance(ocr_result, list) and len(ocr_result) > 0:
                    # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç PaddleOCR
                    for page_result in ocr_result:
                        if page_result:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –ø—É—Å—Ç–∞—è
                            for line in page_result:
                                if len(line) >= 2:
                                    text = line[1][0]  # –¢–µ–∫—Å—Ç
                                    confidence = line[1][1]  # –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Å
                                    if text.strip():
                                        recognized_texts.append(text.strip())
                                        confidences.append(confidence)
                
                if not recognized_texts:
                    return {
                        'success': False,
                        'error': '–¢–µ–∫—Å—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω PaddleOCR',
                        'raw_text': '',
                        'fields': {},
                        'confidence': 0
                    }
                
                full_text = '\n'.join(recognized_texts)
                avg_confidence = int(sum(confidences) / len(confidences) * 100) if confidences else 50
                ocr_service = 'PaddleOCR (–ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä)'
                
            else:
                return {
                    'success': False,
                    'error': f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø OCR: {self.ocr_type}',
                    'raw_text': '',
                    'fields': {},
                    'confidence': 0
                }
            
            # –ü–æ–¥—á–∏—â–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            clean_text = full_text.replace('\t', ' ').replace('\r', '\n')
            while '  ' in clean_text:
                clean_text = clean_text.replace('  ', ' ')
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª—è —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥–µ–∫—Å–æ–≤
            extracted_fields = self._extract_simple_fields(clean_text)
            
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ —á–µ—Ä–µ–∑ {self.ocr_type.upper()}")
            logger.info(f"üìù –¢–µ–∫—Å—Ç: {clean_text[:100]}...") 
            logger.info(f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {avg_confidence}%")
            logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ–π: {len(extracted_fields)}")
            if extracted_fields:
                logger.info(f"üîç –ü–æ–ª—è: {extracted_fields}")
            
            return {
                'success': True,
                'raw_text': full_text,
                'fields': extracted_fields,
                'confidence': avg_confidence,
                'ocr_service': ocr_service
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ OCR: {str(e)}")
            return {
                'success': False,
                'error': f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {str(e)}',
                'raw_text': '',
                'fields': {},
                'confidence': 0
            }
    
    def _extract_simple_fields(self, text: str) -> Dict:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã—Ö –ø–æ–ª–µ–π –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        fields = {}
        text_lower = text.lower()
        
        logger.info(f"üîç –ü–æ–∏—Å–∫ –ø–æ–ª–µ–π –≤ —Ç–µ–∫—Å—Ç–µ: {text[:200]}...")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞
        document_type = self._detect_document_type(text)
        logger.info(f"üìÑ –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: {document_type}")
        
        try:
            if document_type == 'transport_waybill':
                patterns = self._get_transport_waybill_patterns()
            else:
                patterns = self._get_default_patterns()
            
            return self._extract_fields_with_patterns(text, patterns)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–ª–µ–π: {str(e)}")
            return {}
    
    def _detect_document_type(self, text: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
        text_lower = text.lower()
        
        logger.info(f"üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
        logger.info(f"üìù –¢–µ–∫—Å—Ç (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤): {text_lower[:200]}...")
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π –Ω–∞–∫–ª–∞–¥–Ω–æ–π (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ)
        transport_keywords = [
            # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
            '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è –Ω–∞–∫–ª–∞–¥–Ω–∞—è',
            '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è',
            '–Ω–∞–∫–ª–∞–¥–Ω–∞—è',
            
            # –£—á–∞—Å—Ç–Ω–∏–∫–∏
            '–≥—Ä—É–∑–æ–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å',
            '–≥—Ä—É–∑–æ–ø–æ–ª—É—á–∞—Ç–µ–ª—å',
            '–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å',
            '–ø–æ–ª—É—á–∞—Ç–µ–ª—å',
            
            # –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç
            '–∞–≤—Ç–æ–º–æ–±–∏–ª—å',
            '–≤–æ–¥–∏—Ç–µ–ª—å',
            '—Ç–µ–Ω—Ç–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–∏—Ü–µ–ø',
            
            # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≥—Ä—É–∑–∞
            '–º–∞—Å—Å–∞ –Ω–µ—Ç—Ç–æ',
            '–º–∞—Å—Å–∞ –±—Ä—É—Ç—Ç–æ',
            '–Ω–µ—Ç—Ç–æ',
            '–±—Ä—É—Ç—Ç–æ',
            '—Ç–∏–ø –≤–ª–∞–¥–µ–Ω–∏—è',
            
            # –û–±—ä–µ–º
            '–æ–±—ä–µ–º',
            '–º¬≥',
            '–º3'
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π –Ω–∞–∫–ª–∞–¥–Ω–æ–π
        found_keywords = []
        transport_count = 0
        for keyword in transport_keywords:
            if keyword in text_lower:
                transport_count += 1
                found_keywords.append(keyword)
                logger.info(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ: '{keyword}'")
            else:
                logger.info(f"  ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ: '{keyword}'")
        
        logger.info(f"üìà –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {transport_count} –∏–∑ {len(transport_keywords)}")
        logger.info(f"üîë –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞: {found_keywords}")
        
        # –ü–æ–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥ –¥–æ 1 —Å–ª–æ–≤–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        if transport_count >= 1:  # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ —Ö–æ—Ç—è –±—ã 1 –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
            result = 'transport_waybill'
            logger.info(f"üöö –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: {result} (—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è –Ω–∞–∫–ª–∞–¥–Ω–∞—è)")
            return result
        
        result = 'default'
        logger.info(f"üìÑ –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: {result} (–æ–±—ã—á–Ω–∞—è –Ω–∞–∫–ª–∞–¥–Ω–∞—è)")
        return result
    
    def _get_transport_waybill_patterns(self) -> Dict:
        """–ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π –Ω–∞–∫–ª–∞–¥–Ω–æ–π (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–¥ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç)"""
        return {
            # –ù–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π
            'document_number': [
                r'—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è –Ω–∞–∫–ª–∞–¥–Ω–∞—è\s*‚Ññ\s*([\d/–ê-–Ø–Å]+)',
                r'–Ω–∞–∫–ª–∞–¥–Ω–∞—è\s*‚Ññ\s*([\d/–ê-–Ø–Å]+)',
                r'‚Ññ\s*([\d/–ê-–Ø–Å]+)',
            ],
            
            # –î–∞—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            'delivery_date': [
                r'–¥–∞—Ç–∞[:.]?\s*(\d{1,2}[.\-/]\d{1,2}[.\-/]\d{4})',
                r'(\d{2}\.\d{2}\.\d{4})',
            ],
            
            # –ü–æ—Å—Ç–∞–≤—â–∏–∫ (–≥—Ä—É–∑–æ–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å)
            'supplier': [
                r'–≥—Ä—É–∑–æ–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å[:.]?\s*([^\n]+?)(?=\s*–ò–ù–ù|$)',
                r'–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å[:.]?\s*([^\n]+)',
            ],
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–¥ –Ω–∞—à —Ç–µ–∫—Å—Ç)
            'quantity': [
                r'–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ[:.]?\s*(\d+)',
                r'(\d+)\s*—Ç–æ–Ω–Ω',
                r'(\d+)\s*—à—Ç',
            ],
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç
            'package_count': [
                r'–º–µ—Å—Ç[:.]?\s*(\d+)',
                r'(\d+)\s*–º–µ—Å—Ç',
            ],
            
            # –û–ø–∏—Å–∞–Ω–∏–µ/–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞
            'description': [
                r'–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ\s+–≥—Ä—É–∑–∞[:.]?\s*([^\n]+)',
                r'(—Ü–µ–º–µ–Ω—Ç\s*[^\n]*)',
                r'(–±–µ—Ç–æ–Ω\s*[^\n]*)',
            ],
            
            # –ò–ù–ù –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
            'supplier_inn': [
                r'–∏–Ω–Ω[:.]?\s*(\d{10,12})',
            ],
            
            # –í–æ–¥–∏—Ç–µ–ª—å
            'driver_name': [
                r'–≤–æ–¥–∏—Ç–µ–ª—å[:.]?\s*([A-–Ø–Å][a-—è—ë]+\s+[A-–Ø–Å][a-—è—ë]+\s+[A-–Ø–Å][a-—è—ë]+)',
                r'–≤–æ–¥–∏—Ç–µ–ª—å[:.]?\s*([A-–Ø–Å–∞-—è—ë\s]+)',
            ],
            
            # –ù–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è
            'vehicle_number': [
                r'–∞–≤—Ç–æ–º–æ–±–∏–ª—å[:.]?\s*([A-–Ø–Å]\d{3}[A-–Ø–Å]{1,2}\d{2,3})',
                r'([A-–Ø–Å]\d{3}[A-–Ø–Å]{1,2}\d{2,3})',
            ],
            
            # –í–µ—Å –≥—Ä—É–∑–∞ (–∫–≥)
            'cargo_weight': [
                r'–≤–µ—Å[:.]?\s*(\d{4,})\s*–∫–≥',
                r'(\d{4,})\s*–∫–≥',
            ],
            
            # –ü—Ä–æ–µ–∫—Ç (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ)
            'project': [
                r'–ø—Ä–æ–µ–∫—Ç[:.]?\s*([^\n]+)',
            ],
            
            # ==========================================================
            # –ü–û–õ–Ø –î–õ–Ø –ü–û–õ–ù–û–ô –¢–†–ê–ù–°–ü–û–†–¢–ù–û–ô –ù–ê–ö–õ–ê–î–ù–û–ô
            # (–æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –≤ –±—É–¥—É—â–µ–º –±—É–¥—É—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–ª–µ–π)
            # ==========================================================
            
            # –ì—Ä—É–∑–æ–ø–æ–ª—É—á–∞—Ç–µ–ª—å
            'recipient': [
                r'–≥—Ä—É–∑–æ–ø–æ–ª—É—á–∞—Ç–µ–ª—å[:.]?\s*([^\n]+?)(?=\s*\d|$)',
                r'–ø–æ–ª—É—á–∞—Ç–µ–ª—å[:.]?\s*([^\n]+)',
            ],
            
            # –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
            'delivery_address': [
                r'–≥\s*\.?\s*–º–æ—Å–∫–≤–∞[,\s]*([^\n]+?)(?=\s*\d|$)',
                r'–ø–æ—Å–µ–ª–æ–∫\s+([^,\n]+)',
                r'–ø—Ä-–∫—Ç\s+([^,\n]+)',
            ],
            
            # –û–±—ä–µ–º
            'volume': [
                r'(\d+[,.]\d+)\s*–º3',
                r'(\d+[,.]\d+)\s*–º\s*3',
                r'/\s*(\d+[,.]\d+)\s*–º3',
            ],
            
            # –ú–∞—Å—Å–∞ –Ω–µ—Ç—Ç–æ
            'cargo_weight_net': [
                r'–Ω–µ—Ç—Ç–æ[:.]?\s*‚Äî?\s*(\d+[,.]\d+)\s*—Ç',
                r'–º–∞—Å—Å–∞\s+–Ω–µ—Ç—Ç–æ[:.]?\s*(\d+[,.]\d+)',
            ],
            
            # –ú–∞—Å—Å–∞ –±—Ä—É—Ç—Ç–æ
            'cargo_weight_gross': [
                r'–±—Ä—É—Ç—Ç–æ[:.]?\s*‚Äî?\s*(\d+[,.]\d+)\s*—Ç',
                r'–º–∞—Å—Å–∞\s+–±—Ä—É—Ç—Ç–æ[:.]?\s*(\d+[,.]\d+)',
            ],
            
            # –û–±—ä–µ–º –≥—Ä—É–∑–∞
            'cargo_volume': [
                r'–æ–±—ä–µ–º[:.]?\s*(\d+[,.]\d+)\s*–º',
                r'(\d+[,.]\d+)\s*–º¬≥',
            ],
            
            # –¢–∏–ø –≤–ª–∞–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º
            'ownership_type': [
                r'—Ç–∏–ø\s+–≤–ª–∞–¥–µ–Ω–∏—è[:.]?\s*(\d+)',
                r'–≤–ª–∞–¥–µ–Ω–∏–µ[:.]?\s*(\d)',
            ],
        }
    
    def _get_default_patterns(self) -> Dict:
        """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö"""
        return {
            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            'quantity': [
                r'–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ[:.]?\s*(\d+)',
                r'(\d+)\s+—Ç–æ–Ω–Ω',
                r'(\d+)\s*—Ç\.',
                r'–≤–µ—Å[:.]?\s*(\d+)',
            ],
            
            'package_count': [
                r'–º–µ—Å—Ç[:.]?\s*(\d+)',
                r'(\d+)\s+–º–µ—Å—Ç',
            ],
            
            'delivery_date': [
                r'–¥–∞—Ç–∞[:.]?\s*(\d{1,2}[.\-/]\d{1,2}[.\-/]\d{4})',
                r'(\d{2}\.\d{2}\.\d{4})',
            ],
            
            'supplier': [
                r'–æ–æ–æ\s*["¬´]([^"¬ª]+)["¬ª]',
                r'–≥—Ä—É–∑–æ–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å[:.]?\s*([^\n]+)',
                r'–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å[:.]?\s*([^\n]+)',
            ],
            
            'document_number': [
                r'‚Ññ\s*(\d{4,})',
                r'–Ω–∞–∫–ª–∞–¥–Ω–∞—è\s*‚Ññ\s*(\d{4,})',
                r'(\d{4,})(?=\s*$|\s*\n)',  # 4+ —Ü–∏—Ñ—Ä—ã –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
            ],
            
            'supplier_inn': [
                r'–∏–Ω–Ω[:.]?\s*(\d{10,12})',
            ],
            
            'driver_name': [
                r'–≤–æ–¥–∏—Ç–µ–ª—å[:.]?\s*([A-–Ø–Å][a-—è—ë]+\s+[A-–Ø–Å][a-—è—ë]+\s+[A-–Ø–Å][a-—è—ë]+)',
                r'–≤–æ–¥–∏—Ç–µ–ª—å[:.]?\s*([A-–Ø–Å–∞-—è—ë\s]+)',
            ],
            
            'vehicle_number': [
                r'–∞–≤—Ç–æ–º–æ–±–∏–ª—å[:.]?\s*([A-–Ø–Å]\d{3}[A-–Ø–Å]{1,2}\d{2,3})',
                r'([A-–Ø–Å]\d{3}[A-–Ø–Å]{1,2}\d{2,3})',
            ],
            
            'cargo_weight': [
                r'–≤–µ—Å[:.]?\s*(\d{4,})\s*–∫–≥',
                r'(\d{4,})\s*–∫–≥',
            ],
            
            'description': [
                r'–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ\s+–≥—Ä—É–∑–∞[:.]?\s*([^\n]+)',
                r'(—Ü–µ–º–µ–Ω—Ç\s*[^\n]*)',
                r'(–ø–µ—Å–æ–∫\s*[^\n]*)',
                r'(—â–µ–±–µ–Ω—å\s*[^\n]*)',
            ],
        }
    
    def _extract_fields_with_patterns(self, text: str, patterns: Dict) -> Dict:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª–µ–π —Å –ø–æ–º–æ—â—å—é –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
        fields = {}
        
        # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
        for field, field_patterns in patterns.items():
            logger.info(f"üîç –ü–æ–∏—Å–∫ –ø–æ–ª—è '{field}'...")
            field_found = False
            
            for i, pattern in enumerate(field_patterns):
                try:
                    matches = re.findall(pattern, text, re.IGNORECASE)
                    logger.info(f"  –ü–∞—Ç—Ç–µ—Ä–Ω {i+1}: '{pattern}' -> {matches}")
                    
                    if matches:
                        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                        value = str(matches[0]).strip()
                        if value and len(value) > 0:
                            # –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Å—Ç—ã—Ö –æ—à–∏–±–æ–∫ OCR
                            value = self._fix_common_ocr_errors(value)
                            
                            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–ª–µ–π
                            value = self._postprocess_field_value(field, value)
                            
                            fields[field] = value
                            logger.info(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ: {field} = '{value}'")
                            field_found = True
                            break  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–ª—é
                except Exception as e:
                    logger.error(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ {i+1}: {e}")
            
            if not field_found:
                logger.warning(f"  ‚ö†Ô∏è –ü–æ–ª–µ '{field}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        logger.info(f"üéÜ –ò—Ç–æ–≥: –Ω–∞–π–¥–µ–Ω–æ {len(fields)} –ø–æ–ª–µ–π: {list(fields.keys())}")
        return fields
    
    def _postprocess_field_value(self, field: str, value: str) -> str:
        """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–ª–µ–π"""
        if not value:
            return value
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã
        if field == 'delivery_date':
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–¥.–º–º.–≥–≥–≥–≥ –≤ –≥–≥–≥–≥-–º–º-–¥–¥
            if re.match(r'\d{2}\.\d{2}\.\d{4}', value):
                parts = value.split('.')
                if len(parts) == 3:
                    return f"{parts[2]}-{parts[1]}-{parts[0]}"
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        if field in ['quantity', 'cargo_weight', 'package_count']:
            # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
            clean_value = re.sub(r'[^\d]', '', value)
            return clean_value if clean_value else value
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä–æ–±–Ω—ã—Ö —á–∏—Å–µ–ª (–≤–µ—Å, –æ–±—ä–µ–º)
        if field in ['cargo_weight_net', 'cargo_weight_gross', 'volume', 'cargo_volume']:
            # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É
            clean_value = value.replace(',', '.')
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ —Ç–æ—á–∫—É
            clean_value = re.sub(r'[^\d.]', '', clean_value)
            return clean_value if clean_value else value
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
        if field in ['supplier', 'recipient', 'description', 'delivery_address']:
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
            clean_value = re.sub(r'\s+', ' ', value.strip())
            clean_value = clean_value.strip('"\'¬´¬ª')
            return clean_value
        
        return value.strip()
    
    def _fix_common_ocr_errors(self, text: str) -> str:
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —á–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏ OCR –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã"""
        if not text:
            return text
            
        # –û–±—â–∏–µ –∑–∞–º–µ–Ω—ã –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
        corrections = {
            # –û—à–∏–±–∫–∏ –≤ –Ω–æ–º–µ—Ä–∞—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            r'/(\d)$': r'/–ë',  # /6 –Ω–∞ –∫–æ–Ω—Ü–µ ‚Üí /–ë
            r'/6$': r'/–ë',     # /6 ‚Üí /–ë
            r'/0$': r'/–û',     # /0 ‚Üí /–û (–Ω—É–ª—å –Ω–∞ –û)
            r'/9$': r'/–†',     # /9 ‚Üí /–†
            r'/8$': r'/–í',     # /8 ‚Üí /–í
            r'/(\d)(\d)$': lambda m: f'/–ë{m.group(2)}',  # /66 ‚Üí /–ë6
            
            # –û—à–∏–±–∫–∏ –≤ –∞–≤—Ç–æ–Ω–æ–º–µ—Ä–∞—Ö
            r'–∫–º': '–ö–ú',  # –∫–º ‚Üí –ö–ú
            r'–∫–≤': '–ö–ú',  # –∫–≤ ‚Üí –ö–ú (–æ—à–∏–±–∫–∞ –ú/–í)
            r'–∫–º(\d)': r'–ö–ú\1',  # –∫–º777 ‚Üí –ö–ú777
        }
        
        result = text
        for pattern, replacement in corrections.items():
            if callable(replacement):
                result = re.sub(pattern, replacement, result)
            else:
                result = re.sub(pattern, replacement, result)
        
        return result


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
_simple_ocr_processor = None

def get_simple_ocr_processor():
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ—Å—Ç–æ–≥–æ OCR –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""
    global _simple_ocr_processor
    if _simple_ocr_processor is None:
        _simple_ocr_processor = SimpleOCRProcessor()
    return _simple_ocr_processor