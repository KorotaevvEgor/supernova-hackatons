#!/usr/bin/env python3
"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel —Ñ–∞–π–ª–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python import_excel_data_enhanced.py
"""
import os
import sys
import django
import pandas as pd
import re
from decimal import Decimal, InvalidOperation
from pathlib import Path
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append('/Users/korotaevegor/Desktop/–•–∞–∫–∞—Ç–æ–Ω/urban_construction_system')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'urban_construction_system.settings')
django.setup()

from projects.models import (
    Project, WorkType, ElectronicSpecification, SpecificationItem,
    NetworkSchedule, ScheduleTask
)


class EnhancedExcelDataImporter:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel —Ñ–∞–π–ª–æ–≤"""
    
    def __init__(self):
        # –ü—É—Ç–∏ –∫ –ø–∞–ø–∫–∞–º —Å –¥–∞–Ω–Ω—ã–º–∏
        self.works_folder = Path('/Users/korotaevegor/Desktop/–•–∞–∫–∞—Ç–æ–Ω/–î–∞—Ç–∞—Å–µ—Ç –õ–¶–¢ 2025/–≠–ª. —Å–ø–µ—Ü-–∏–∏ –∏ –ø–µ—Ä–µ—á–µ–Ω—å —Ä–∞–±–æ—Ç')
        self.schedule_folder = Path('/Users/korotaevegor/Desktop/–•–∞–∫–∞—Ç–æ–Ω/–î–∞—Ç–∞—Å–µ—Ç –õ–¶–¢ 2025/–ü—Ä–∏–º–µ—Ä —Å–µ—Ç–µ–≤–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞')
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–∞
        self.stats = {
            'specifications': 0,
            'spec_items': 0,
            'schedules': 0,
            'schedule_tasks': 0,
            'errors': [],
            'matched_files': []
        }
        
        # –£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        self.mapping_rules = {
            '–∫–∞—Ä–≥–æ–ø–æ–ª—å—Å–∫–∞—è': {'keywords': ['–∫–∞—Ä–≥–æ–ø–æ–ª—å—Å–∫–∞—è', '18'], 'address_parts': ['–∫–∞—Ä–≥–æ–ø–æ–ª—å—Å–∫–∞—è']},
            '–ø—Ä–æ—Å–ø–µ–∫—Ç': {'keywords': ['–º–∏—Ä–∞', '194'], 'address_parts': ['–º–∏—Ä–∞', '–ø—Ä–æ—Å–ø–µ–∫—Ç']},
            '–º–∏—Ä–∞': {'keywords': ['–º–∏—Ä–∞', '194'], 'address_parts': ['–º–∏—Ä–∞']},
            '–ø—É—Ç–µ–≤–æ–π': {'keywords': ['–ø—É—Ç–µ–≤–æ–π', '38'], 'address_parts': ['–ø—É—Ç–µ–≤–æ–π']},
            '—Ñ–ª–æ—Ç—Å–∫–∞—è': {'keywords': ['—Ñ–ª–æ—Ç—Å–∫–∞—è', '54'], 'address_parts': ['—Ñ–ª–æ—Ç—Å–∫–∞—è']},
            '–±–µ—Å—Ç—É–∂–µ–≤—ã—Ö': {'keywords': ['–±–µ—Å—Ç—É–∂–µ–≤—ã—Ö', '27'], 'address_parts': ['–±–µ—Å—Ç—É–∂–µ–≤—ã—Ö']},
            '—á–µ–ª–æ–±–∏—Ç—å–µ–≤—Å–∫–æ–µ': {'keywords': ['—á–µ–ª–æ–±–∏—Ç—å–µ–≤—Å–∫–æ–µ'], 'address_parts': ['—á–µ–ª–æ–±–∏—Ç—å–µ–≤—Å–∫–æ–µ']}
        }

    def parse_decimal(self, value):
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
        if pd.isna(value) or value == '' or value is None:
            return None
        
        try:
            if isinstance(value, (int, float)):
                return Decimal(str(value))
            
            # –û—á–∏—Å—Ç–∫–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            clean_value = str(value).replace(',', '.').replace(' ', '')
            clean_value = re.sub(r'[^\d.-]', '', clean_value)
            
            if clean_value:
                return Decimal(clean_value)
        except (InvalidOperation, ValueError):
            # –£–±–∏—Ä–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç –∫–∞–∫ —á–∏—Å–µ–ª
            pass
        
        return None

    def advanced_project_matching(self, filename):
        """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å —Ñ–∞–π–ª–∞–º–∏"""
        filename_lower = filename.lower()
        print(f"\nüîç –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Ñ–∞–π–ª–∞: {filename}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã
        all_projects = list(Project.objects.all())
        print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã:")
        for p in all_projects:
            print(f"  ‚Ä¢ ID {p.id}: {p.name} - {p.address}")
        
        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º
        for rule_key, rule_data in self.mapping_rules.items():
            if rule_key in filename_lower:
                print(f"  ‚ÑπÔ∏è –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '{rule_key}'")
                
                # –ò—â–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
                for project in all_projects:
                    project_text = (project.address + ' ' + project.name).lower()
                    matches = sum(1 for keyword in rule_data['keywords'] if keyword in project_text)
                    
                    if matches > 0:
                        print(f"    ‚úÖ –ù–∞–π–¥–µ–Ω: {project.name} ({matches} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π)")
                        return project
        
        # –û–±—â–∏–π –ø–æ–∏—Å–∫ –ø–æ —Å–ª–æ–≤–∞–º
        filename_words = re.findall(r'[a-z–∞-—è—ë0-9]+', filename_lower)
        print(f"  –°–ª–æ–≤–∞ –≤ —Ñ–∞–π–ª–µ: {filename_words}")
        
        best_project = None
        best_score = 0
        
        for project in all_projects:
            project_words = re.findall(r'[a-z–∞-—è—ë0-9]+', (project.address + ' ' + project.name).lower())
            common_words = set(filename_words) & set(project_words)
            score = len(common_words)
            
            if score > 0:
                print(f"    {project.name}: {score} –æ–±—â–∏—Ö —Å–ª–æ–≤ ({common_words})")
            
            if score > best_score:
                best_score = score
                best_project = project
        
        if best_project and best_score > 0:
            print(f"  ‚úÖ –õ—É—á—à–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç: {best_project.name} (—Å–∫–æ—Ä {best_score})")
            return best_project
        
        print(f"  ‚ùå –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
        return None

    def import_specifications_enhanced(self):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π"""
        print(f"\nüìã –†–ê–°–®–ò–†–ï–ù–ù–´–ô –ò–ú–ü–û–†–¢ –°–ü–ï–¶–ò–§–ò–ö–ê–¶–ò–ô")
        print(f"–ü–∞–ø–∫–∞: {self.works_folder}")
        
        if not self.works_folder.exists():
            self.stats['errors'].append(f"–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.works_folder}")
            return
        
        excel_files = list(self.works_folder.glob("*.xlsx"))
        print(f"–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(excel_files)}")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        matched_pairs = []
        unmatched_files = []
        
        for file_path in excel_files:
            project = self.advanced_project_matching(file_path.name)
            if project:
                matched_pairs.append((file_path, project))
                self.stats['matched_files'].append(f"{file_path.name} -> {project.name}")
            else:
                unmatched_files.append(file_path)
        
        print(f"\n‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {len(matched_pairs)} —Ñ–∞–π–ª–æ–≤")
        print(f"‚ö†Ô∏è –ù–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {len(unmatched_files)} —Ñ–∞–π–ª–æ–≤")
        
        # –î–ª—è –Ω–µ—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–µ–ª–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å –æ—Å—Ç–∞–≤—à–∏–º–∏—Å—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏
        remaining_projects = list(Project.objects.exclude(
            id__in=[pair[1].id for pair in matched_pairs]
        ))
        
        print(f"\n–û—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—Ä–æ–µ–∫—Ç—ã –±–µ–∑ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π: {len(remaining_projects)}")
        for project in remaining_projects:
            print(f"  ‚Ä¢ {project.name}")
        
        # –°–ª—É—á–∞–π–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ñ–∞–π–ª–æ–≤
        for file_path in unmatched_files[:len(remaining_projects)]:
            if remaining_projects:
                project = remaining_projects.pop(0)
                matched_pairs.append((file_path, project))
                print(f"üé≤ –°–ª—É—á–∞–π–Ω–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {file_path.name} -> {project.name}")
                self.stats['matched_files'].append(f"{file_path.name} -> {project.name} (—Å–ª—É—á–∞–π–Ω–æ)")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–∞—Ä—ã
        for file_path, project in matched_pairs:
            self.import_single_specification(file_path, project)

    def import_single_specification(self, file_path, project):
        """–ò–º–ø–æ—Ä—Ç –æ–¥–Ω–æ–π —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        try:
            print(f"\nüìÑ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é: {file_path.name} -> {project.name}")
            
            # –ß—Ç–µ–Ω–∏–µ Excel —Ñ–∞–π–ª–∞
            try:
                df = pd.read_excel(file_path, sheet_name=0)
                print(f"  üìä –ü—Ä–æ—á–∏—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: {len(df)}, —Å—Ç–æ–ª–±—Ü–æ–≤: {len(df.columns)}")
            except Exception as e:
                error = f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path.name}: {e}"
                print(f"  ‚ùå {error}")
                self.stats['errors'].append(error)
                return
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
            spec, created = ElectronicSpecification.objects.get_or_create(
                project=project,
                defaults={'source_file': file_path.name}
            )
            
            if created:
                print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è")
                self.stats['specifications'] += 1
            else:
                # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                old_count = spec.items.count()
                spec.items.all().delete()
                print(f"  üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è (—É–¥–∞–ª–µ–Ω–æ {old_count} —Å—Ç–∞—Ä—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤)")
            
            # –ò–º–ø–æ—Ä—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
            items_created = 0
            for idx, row in df.iterrows():
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–≤—Å–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                if all(pd.isna(row.iloc[i]) for i in range(min(3, len(row)))):
                    continue
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç–æ–ª–±—Ü–æ–≤
                code = str(row.iloc[0]) if not pd.isna(row.iloc[0]) else ''
                name = str(row.iloc[1]) if len(row) > 1 and not pd.isna(row.iloc[1]) else f'–ü–æ–∑–∏—Ü–∏—è {idx}'
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏
                if len(name) < 3 or '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ' in name.lower():
                    continue
                
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                unit = ''
                quantity = None
                unit_price = None
                total_price = None
                category = ''
                
                if len(df.columns) > 2:
                    unit = str(row.iloc[2]) if not pd.isna(row.iloc[2]) else ''
                if len(df.columns) > 3:
                    quantity = self.parse_decimal(row.iloc[3])
                if len(df.columns) > 4:
                    unit_price = self.parse_decimal(row.iloc[4])
                if len(df.columns) > 5:
                    total_price = self.parse_decimal(row.iloc[5])
                
                # –£–º–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è
                category = self.categorize_work(name, code)
                
                SpecificationItem.objects.create(
                    specification=spec,
                    code=code[:50],
                    name=name[:500],
                    unit=unit[:20],
                    quantity=quantity,
                    unit_price=unit_price,
                    total_price=total_price,
                    category=category,
                    order=idx
                )
                items_created += 1
            
            print(f"  ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {items_created} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏")
            self.stats['spec_items'] += items_created
            
        except Exception as e:
            error = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {file_path.name}: {e}"
            print(f"  ‚ùå {error}")
            self.stats['errors'].append(error)

    def categorize_work(self, name, code):
        """–£–º–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç"""
        name_lower = name.lower()
        code_lower = code.lower()
        text = f"{name_lower} {code_lower}"
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞–±–æ—Ç
        if any(word in text for word in ['—Ñ—É–Ω–¥–∞–º–µ–Ω—Ç', '–æ—Å–Ω–æ–≤–∞–Ω–∏–µ', '–±–µ—Ç–æ–Ω', '–∞—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ']):
            return '–§—É–Ω–¥–∞–º–µ–Ω—Ç–Ω—ã–µ —Ä–∞–±–æ—Ç—ã'
        elif any(word in text for word in ['—Å—Ç–µ–Ω–∞', '–∫–ª–∞–¥–∫–∞', '–∫–∏—Ä–ø–∏—á', '–±–ª–æ–∫']):
            return '–°—Ç–µ–Ω–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã'
        elif any(word in text for word in ['–∫—Ä–æ–≤–ª—è', '–∫—Ä—ã—à', '–ø–æ–∫—Ä—ã—Ç–∏–µ', '–º–µ—Ç–∞–ª–ª–æ—á–µ—Ä–µ–ø–∏—Ü']):
            return '–ö—Ä–æ–≤–µ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã'
        elif any(word in text for word in ['–æ—Ç–¥–µ–ª–∫', '—à—Ç—É–∫–∞—Ç—É—Ä', '–ø–æ–∫—Ä–∞—Å–∫', '–æ–±–æ–∏']):
            return '–û—Ç–¥–µ–ª–æ—á–Ω—ã–µ —Ä–∞–±–æ—Ç—ã'
        elif any(word in text for word in ['–æ–∫–Ω', '–¥–≤–µ—Ä', '–ø—Ä–æ–µ–º']):
            return '–°—Ç–æ–ª—è—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã'
        elif any(word in text for word in ['—ç–ª–µ–∫—Ç—Ä', '–ø—Ä–æ–≤–æ–¥–∫', '–æ—Å–≤–µ—â–µ–Ω', '—Ä–æ–∑–µ—Ç–∫']):
            return '–≠–ª–µ–∫—Ç—Ä–æ–º–æ–Ω—Ç–∞–∂–Ω—ã–µ —Ä–∞–±–æ—Ç—ã'
        elif any(word in text for word in ['–≤–æ–¥–æ–ø—Ä–æ–≤–æ–¥', '–∫–∞–Ω–∞–ª–∏–∑–∞—Ü', '–æ—Ç–æ–ø–ª–µ–Ω–∏–µ', '—Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫']):
            return '–°–∞–Ω—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã'
        elif any(word in text for word in ['–±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π', '–æ–∑–µ–ª–µ–Ω', '–¥–æ—Ä–æ–∂–∫', '—Ç—Ä–æ—Ç—É–∞—Ä']):
            return '–ë–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ'
        elif any(word in text for word in ['–∑–µ–º–ª—è–Ω—ã–µ', '–≤—ã–µ–º–∫', '–∑–∞—Å—ã–ø–∫', '–≥—Ä—É–Ω—Ç']):
            return '–ó–µ–º–ª—è–Ω—ã–µ —Ä–∞–±–æ—Ç—ã'
        else:
            return '–û–±—â–µ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã'

    def create_schedules_for_all_projects(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–µ–≤—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤"""
        print(f"\nüìä –°–û–ó–î–ê–ù–ò–ï –°–ï–¢–ï–í–´–• –ì–†–ê–§–ò–ö–û–í –î–õ–Ø –í–°–ï–• –ü–†–û–ï–ö–¢–û–í")
        
        # –ß–∏—Ç–∞–µ–º –±–∞–∑–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ –∏–∑ —Ñ–∞–π–ª–∞
        base_schedule_data = self.read_base_schedule()
        
        projects = Project.objects.all()
        print(f"–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {projects.count()}")
        
        for project in projects:
            print(f"\nüèóÔ∏è –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞: {project.name}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≥—Ä–∞—Ñ–∏–∫
            existing_schedule = NetworkSchedule.objects.filter(project=project).first()
            if existing_schedule:
                print(f"  üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≥—Ä–∞—Ñ–∏–∫")
                existing_schedule.tasks.all().delete()
                schedule = existing_schedule
            else:
                print(f"  ‚úÖ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫")
                schedule = NetworkSchedule.objects.create(
                    project=project,
                    source_file='–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫',
                    project_duration_days=120
                )
                self.stats['schedules'] += 1
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ —à–∞–±–ª–æ–Ω–∞
            tasks_created = self.create_tasks_for_project(schedule, project, base_schedule_data)
            print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–æ {tasks_created} –∑–∞–¥–∞—á")
            self.stats['schedule_tasks'] += tasks_created

    def read_base_schedule(self):
        """–ß—Ç–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –∏–∑ Excel —Ñ–∞–π–ª–∞"""
        schedule_files = list(self.schedule_folder.glob("*.xlsx"))
        if not schedule_files:
            return self.get_default_schedule_template()
        
        try:
            file_path = schedule_files[0]
            print(f"üìñ –ß–∏—Ç–∞–µ–º –±–∞–∑–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ –∏–∑: {file_path.name}")
            
            excel_file = pd.ExcelFile(file_path)
            
            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ª–∏—Å—Ç
            df = None
            for sheet_name in excel_file.sheet_names:
                temp_df = pd.read_excel(file_path, sheet_name=sheet_name)
                if len(temp_df) > 5:  # –ï—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
                    df = temp_df
                    print(f"  –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏—Å—Ç: {sheet_name}")
                    break
            
            if df is None:
                df = pd.read_excel(file_path, sheet_name=0)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–¥–∞—á–∏
            tasks = []
            for idx, row in df.iterrows():
                if idx < 2 or pd.isna(row.iloc[0]):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                    continue
                
                task_id = str(row.iloc[0]) if not pd.isna(row.iloc[0]) else f"T{idx}"
                name = str(row.iloc[1]) if len(row) > 1 and not pd.isna(row.iloc[1]) else f"–ó–∞–¥–∞—á–∞ {task_id}"
                
                # –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                duration = 5  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if len(row) > 2 and not pd.isna(row.iloc[2]):
                    try:
                        duration = max(1, int(float(str(row.iloc[2]).replace(',', '.'))))
                    except:
                        duration = 5
                
                tasks.append({
                    'task_id': task_id[:50],
                    'name': name[:500],
                    'duration_days': duration
                })
            
            print(f"  üìã –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(tasks)} –±–∞–∑–æ–≤—ã—Ö –∑–∞–¥–∞—á")
            return tasks
            
        except Exception as e:
            print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
            return self.get_default_schedule_template()

    def get_default_schedule_template(self):
        """–®–∞–±–ª–æ–Ω –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return [
            {'task_id': 'T001', 'name': '–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã', 'duration_days': 5},
            {'task_id': 'T002', 'name': '–ó–µ–º–ª—è–Ω—ã–µ —Ä–∞–±–æ—Ç—ã', 'duration_days': 10},
            {'task_id': 'T003', 'name': '–§—É–Ω–¥–∞–º–µ–Ω—Ç–Ω—ã–µ —Ä–∞–±–æ—Ç—ã', 'duration_days': 15},
            {'task_id': 'T004', 'name': '–°—Ç–µ–Ω–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã', 'duration_days': 20},
            {'task_id': 'T005', 'name': '–ö—Ä–æ–≤–µ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã', 'duration_days': 12},
            {'task_id': 'T006', 'name': '–ò–Ω–∂–µ–Ω–µ—Ä–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã', 'duration_days': 18},
            {'task_id': 'T007', 'name': '–û—Ç–¥–µ–ª–æ—á–Ω—ã–µ —Ä–∞–±–æ—Ç—ã', 'duration_days': 25},
            {'task_id': 'T008', 'name': '–ë–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ', 'duration_days': 15},
        ]

    def create_tasks_for_project(self, schedule, project, base_tasks):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"""
        tasks_created = 0
        current_start = 1
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á
        if hasattr(project, 'electronic_specification'):
            spec = project.electronic_specification
            if spec.items.exists():
                print(f"  üìã –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ ({spec.items.count()} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)")
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                categories = {}
                for item in spec.items.all():
                    category = item.category or '–û–±—â–∏–µ —Ä–∞–±–æ—Ç—ã'
                    if category not in categories:
                        categories[category] = []
                    categories[category].append(item)
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                task_counter = 1
                for category, items in categories.items():
                    duration = max(5, len(items) * 2)  # 2 –¥–Ω—è –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç, –º–∏–Ω–∏–º—É–º 5 –¥–Ω–µ–π
                    is_critical = category in ['–§—É–Ω–¥–∞–º–µ–Ω—Ç–Ω—ã–µ —Ä–∞–±–æ—Ç—ã', '–°—Ç–µ–Ω–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã'] or task_counter <= 3
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π task_id –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
                    unique_task_id = f"{project.id:02d}S{task_counter:03d}"  # S –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
                    
                    ScheduleTask.objects.create(
                        schedule=schedule,
                        task_id=unique_task_id,
                        name=category,
                        duration_days=duration,
                        early_start=current_start,
                        early_finish=current_start + duration - 1,
                        is_critical=is_critical,
                        resource_names=f"–ë—Ä–∏–≥–∞–¥–∞ {category.split()[0]}",
                        order=task_counter
                    )
                    
                    current_start += duration
                    tasks_created += 1
                    task_counter += 1
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–ª–∏ –º–∞–ª–æ –∑–∞–¥–∞—á, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω
        if tasks_created < 3:
            print(f"  üèóÔ∏è –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞")
            task_counter = tasks_created + 1
            
            for base_task in base_tasks:
                # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                duration = base_task['duration_days'] + random.randint(-2, 3)
                duration = max(1, duration)
                
                is_critical = task_counter <= 4 or '—Ñ—É–Ω–¥–∞–º–µ–Ω—Ç' in base_task['name'].lower()
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π task_id –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
                unique_task_id = f"{project.id:02d}T{task_counter:03d}"
                
                ScheduleTask.objects.create(
                    schedule=schedule,
                    task_id=unique_task_id,
                    name=base_task['name'],
                    duration_days=duration,
                    early_start=current_start,
                    early_finish=current_start + duration - 1,
                    late_start=current_start + random.randint(0, 2),
                    late_finish=current_start + duration - 1 + random.randint(0, 2),
                    is_critical=is_critical,
                    resource_names=self.generate_resources(base_task['name']),
                    order=task_counter
                )
                
                current_start += duration
                tasks_created += 1
                task_counter += 1
        
        return tasks_created

    def generate_resources(self, task_name):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –∑–∞–¥–∞—á–∏"""
        name_lower = task_name.lower()
        
        if '–ø–æ–¥–≥–æ—Ç–æ–≤' in name_lower:
            return '–ü—Ä–æ—Ä–∞–±, –ì–µ–æ–¥–µ–∑–∏—Å—Ç'
        elif '–∑–µ–º–ª—è–Ω—ã–µ' in name_lower:
            return '–≠–∫—Å–∫–∞–≤–∞—Ç–æ—Ä, –í–æ–¥–∏—Ç–µ–ª—å'
        elif '—Ñ—É–Ω–¥–∞–º–µ–Ω—Ç' in name_lower:
            return '–ë–µ—Ç–æ–Ω—â–∏–∫–∏, –ê—Ä–º–∞—Ç—É—Ä—â–∏–∫–∏'
        elif '—Å—Ç–µ–Ω' in name_lower:
            return '–ö–∞–º–µ–Ω—â–∏–∫–∏, –ú–æ–Ω—Ç–∞–∂–Ω–∏–∫–∏'
        elif '–∫—Ä–æ–≤–ª' in name_lower:
            return '–ö—Ä–æ–≤–µ–ª—å—â–∏–∫–∏, –¢–∞–∫–µ–ª–∞–∂–Ω–∏–∫–∏'
        elif '–∏–Ω–∂–µ–Ω–µ—Ä' in name_lower:
            return '–≠–ª–µ–∫—Ç—Ä–∏–∫–∏, –°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∏'
        elif '–æ—Ç–¥–µ–ª–∫' in name_lower:
            return '–ú–∞–ª—è—Ä—ã, –®—Ç—É–∫–∞—Ç—É—Ä—ã'
        elif '–±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π' in name_lower:
            return '–û–∑–µ–ª–µ–Ω–∏—Ç–µ–ª–∏, –ü–ª–∏—Ç–æ—á–Ω–∏–∫–∏'
        else:
            return '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –±—Ä–∏–≥–∞–¥–∞'

    def print_enhanced_stats(self):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–∞"""
        print(f"\nüìà –ü–û–î–†–û–ë–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ú–ü–û–†–¢–ê:")
        print(f"   üè¢ –ü—Ä–æ–µ–∫—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: {Project.objects.count()}")
        print(f"   üìã –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π: {self.stats['specifications']}")
        print(f"   üìù –≠–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π: {self.stats['spec_items']}")
        print(f"   üìä –°–æ–∑–¥–∞–Ω–æ/–æ–±–Ω–æ–≤–ª–µ–Ω–æ –≥—Ä–∞—Ñ–∏–∫–æ–≤: {self.stats['schedules']}")
        print(f"   üóìÔ∏è –ó–∞–¥–∞—á –≤ –≥—Ä–∞—Ñ–∏–∫–∞—Ö: {self.stats['schedule_tasks']}")
        
        if self.stats['matched_files']:
            print(f"\n‚úÖ –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ù–´–ï –§–ê–ô–õ–´ ({len(self.stats['matched_files'])}):")
            for match in self.stats['matched_files']:
                print(f"   ‚Ä¢ {match}")
        
        if self.stats['errors']:
            print(f"\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø ({len(self.stats['errors'])}):")
            for error in self.stats['errors'][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"   ‚Ä¢ {error}")
            if len(self.stats['errors']) > 5:
                print(f"   ‚Ä¢ ... –∏ –µ—â—ë {len(self.stats['errors']) - 5} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")

    def run_enhanced_import(self):
        """–ó–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞"""
        print("üöÄ –ó–ê–ü–£–°–ö –†–ê–°–®–ò–†–ï–ù–ù–û–ì–û –ò–ú–ü–û–†–¢–ê –î–ê–ù–ù–´–•")
        print("=" * 60)
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
        self.import_specifications_enhanced()
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
        self.create_schedules_for_all_projects()
        
        print("\n" + "=" * 60)
        self.print_enhanced_stats()
        print("‚úÖ –†–ê–°–®–ò–†–ï–ù–ù–´–ô –ò–ú–ü–û–†–¢ –ó–ê–í–ï–†–®–ï–ù")


if __name__ == "__main__":
    importer = EnhancedExcelDataImporter()
    importer.run_enhanced_import()