#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel —Ñ–∞–π–ª–æ–≤ —Å –ø–µ—Ä–µ—á–Ω—è–º–∏ —Ä–∞–±–æ—Ç –∏ —Å–µ—Ç–µ–≤—ã–º–∏ –≥—Ä–∞—Ñ–∏–∫–∞–º–∏

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python import_excel_data.py
"""
import os
import sys
import django
import pandas as pd
import re
from decimal import Decimal, InvalidOperation
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append('/Users/korotaevegor/Desktop/–•–∞–∫–∞—Ç–æ–Ω/urban_construction_system')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'urban_construction_system.settings')
django.setup()

from projects.models import (
    Project, WorkType, ElectronicSpecification, SpecificationItem,
    NetworkSchedule, ScheduleTask
)


class ExcelDataImporter:
    """–ò–º–ø–æ—Ä—Ç–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel —Ñ–∞–π–ª–æ–≤"""
    
    def __init__(self):
        # –ü—É—Ç–∏ –∫ –ø–∞–ø–∫–∞–º —Å –¥–∞–Ω–Ω—ã–º–∏
        self.works_folder = Path('/Users/korotaevegor/Desktop/–•–∞–∫–∞—Ç–æ–Ω/–î–∞—Ç–∞—Å–µ—Ç –õ–¶–¢ 2025/–≠–ª. —Å–ø–µ—Ü-–∏–∏ –∏ –ø–µ—Ä–µ—á–µ–Ω—å —Ä–∞–±–æ—Ç')
        self.schedule_folder = Path('/Users/korotaevegor/Desktop/–•–∞–∫–∞—Ç–æ–Ω/–î–∞—Ç–∞—Å–µ—Ç –õ–¶–¢ 2025/–ü—Ä–∏–º–µ—Ä —Å–µ—Ç–µ–≤–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞')
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–∞
        self.stats = {
            'specifications': 0,
            'spec_items': 0,
            'schedules': 0,
            'schedule_tasks': 0,
            'errors': []
        }
    
    def parse_decimal(self, value):
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
        if pd.isna(value) or value == '' or value is None:
            return None
        
        try:
            if isinstance(value, (int, float)):
                return Decimal(str(value))
            
            # –û—á–∏—Å—Ç–∫–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            clean_value = str(value).replace(',', '.').replace(' ', '')
            clean_value = re.sub(r'[^\d.-]', '', clean_value)
            
            if clean_value:
                return Decimal(clean_value)
        except (InvalidOperation, ValueError) as e:
            self.stats['errors'].append(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–∏—Å–ª–∞ '{value}': {e}")
        
        return None
    
    def match_project_by_filename(self, filename):
        """–ü–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        filename_lower = filename.lower()
        print(f"\nüîç –ü–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Ñ–∞–π–ª–∞: {filename}")
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π
        mapping_rules = [
            # –ö–∞—Ä–≥–æ–ø–æ–ª—å—Å–∫–∞—è 18
            ('–∫–∞—Ä–≥–æ–ø–æ–ª—å—Å–∫–∞—è', ['–∫–∞—Ä–≥–æ–ø–æ–ª—å—Å–∫–∞—è', '18']),
            # –ü—Ä–æ—Å–ø–µ–∫—Ç –ú–∏—Ä–∞ 194  
            ('–ø—Ä–æ—Å–ø–µ–∫—Ç_–º–∏—Ä–∞_194', ['–º–∏—Ä–∞', '194']),
            ('–º–∏—Ä–∞', ['–º–∏—Ä–∞', '194']),
            # –ü—É—Ç–µ–≤–æ–π 38
            ('–ø—É—Ç–µ–≤–æ–π', ['–ø—É—Ç–µ–≤–æ–π', '38']),
            # –§–ª–æ—Ç—Å–∫–∞—è 54
            ('—Ñ–ª–æ—Ç—Å–∫–∞—è', ['—Ñ–ª–æ—Ç—Å–∫–∞—è', '54']),
            # –ë–µ—Å—Ç—É–∂–µ–≤—ã—Ö 27
            ('–±–µ—Å—Ç—É–∂–µ–≤—ã—Ö', ['–±–µ—Å—Ç—É–∂–µ–≤—ã—Ö', '27']),
            # –ß–µ–ª–æ–±–∏—Ç—å–µ–≤—Å–∫–æ–µ (–ø–æ–∫–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ, –Ω–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å)
            ('—á–µ–ª–æ–±–∏—Ç—å–µ–≤—Å–∫–æ–µ', ['—á–µ–ª–æ–±–∏—Ç—å–µ–≤—Å–∫–æ–µ'])
        ]
        
        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º
        for keyword, search_terms in mapping_rules:
            if keyword in filename_lower:
                print(f"  ‚ÑπÔ∏è –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '{keyword}', –∏—â–µ–º –ø–æ: {search_terms}")
                
                for project in Project.objects.all():
                    project_text = (project.address + ' ' + project.name).lower()
                    matches = sum(1 for term in search_terms if term in project_text)
                    
                    if matches >= len(search_terms) * 0.5:  # –ú–∏–Ω–∏–º—É–º 50% —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
                        print(f"    ‚úÖ –ù–∞–π–¥–µ–Ω: {project.name} ({matches}/{len(search_terms)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π)")
                        return project
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º, –ø—Ä–æ–±—É–µ–º –æ–±—â–∏–π –ø–æ–∏—Å–∫
        print(f"  ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º, –ø—Ä–æ–±—É–µ–º –æ–±—â–∏–π –ø–æ–∏—Å–∫...")
        
        filename_words = re.findall(r'[a-z–∞-—è—ë0-9]+', filename_lower)
        print(f"    –°–ª–æ–≤–∞ –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞: {filename_words}")
        
        best_project = None
        best_score = 0
        
        for project in Project.objects.all():
            project_words = re.findall(r'[a-z–∞-—è—ë0-9]+', (project.address + ' ' + project.name).lower())
            common_words = set(filename_words) & set(project_words)
            score = len(common_words)
            
            print(f"    {project.name}: {score} –æ–±—â–∏—Ö —Å–ª–æ–≤ ({common_words})")
            
            if score > best_score:
                best_score = score
                best_project = project
        
        if best_score > 0:
            print(f"  ‚úÖ –õ—É—á—à–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç: {best_project.name} (—Å–∫–æ—Ä {best_score})")
            return best_project
        
        print(f"  ‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    
    def import_specifications(self):
        """–ò–º–ø–æ—Ä—Ç —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π"""
        print(f"\nüìã –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ—á–Ω–∏ —Ä–∞–±–æ—Ç –∏–∑ {self.works_folder}")
        
        if not self.works_folder.exists():
            self.stats['errors'].append(f"–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.works_folder}")
            return
        
        excel_files = list(self.works_folder.glob("*.xlsx"))
        print(f"–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(excel_files)}")
        
        for file_path in excel_files:
            try:
                print(f"\nüìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {file_path.name}")
                
                # –ü–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞
                project = self.match_project_by_filename(file_path.name)
                if not project:
                    error = f"–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ñ–∞–π–ª–∞: {file_path.name}"
                    print(f"‚ùå {error}")
                    self.stats['errors'].append(error)
                    continue
                
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä–æ–µ–∫—Ç: {project.name}")
                
                # –ß—Ç–µ–Ω–∏–µ Excel —Ñ–∞–π–ª–∞
                try:
                    df = pd.read_excel(file_path, sheet_name=0)  # –ü–µ—Ä–≤—ã–π –ª–∏—Å—Ç
                except Exception as e:
                    error = f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path.name}: {e}"
                    print(f"‚ùå {error}")
                    self.stats['errors'].append(error)
                    continue
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
                spec, created = ElectronicSpecification.objects.get_or_create(
                    project=project,
                    defaults={'source_file': file_path.name}
                )
                
                if created:
                    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è")
                    self.stats['specifications'] += 1
                else:
                    # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                    spec.items.all().delete()
                    print(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é")
                
                # –ò–º–ø–æ—Ä—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
                items_created = 0
                for idx, row in df.iterrows():
                    if pd.isna(row.iloc[0]) and pd.isna(row.iloc[1]):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                        continue
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç–æ–ª–±—Ü–æ–≤ (–º–æ–≥—É—Ç –±—ã—Ç—å —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã)
                    code = str(row.iloc[0]) if not pd.isna(row.iloc[0]) else ''
                    name = str(row.iloc[1]) if not pd.isna(row.iloc[1]) else ''
                    
                    if len(name) < 3:  # –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                        continue
                    
                    # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç–æ–ª–±—Ü–∞—Ö
                    unit = ''
                    quantity = None
                    unit_price = None
                    total_price = None
                    category = ''
                    
                    if len(df.columns) > 2:
                        unit = str(row.iloc[2]) if not pd.isna(row.iloc[2]) else ''
                    if len(df.columns) > 3:
                        quantity = self.parse_decimal(row.iloc[3])
                    if len(df.columns) > 4:
                        unit_price = self.parse_decimal(row.iloc[4])
                    if len(df.columns) > 5:
                        total_price = self.parse_decimal(row.iloc[5])
                    
                    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∫–æ–¥—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é
                    if '—Ñ—É–Ω–¥–∞–º–µ–Ω—Ç' in name.lower() or '–æ—Å–Ω–æ–≤–∞–Ω–∏–µ' in name.lower():
                        category = '–§—É–Ω–¥–∞–º–µ–Ω—Ç–Ω—ã–µ —Ä–∞–±–æ—Ç—ã'
                    elif '—Å—Ç–µ–Ω–∞' in name.lower() or '–∫–ª–∞–¥–∫–∞' in name.lower():
                        category = '–°—Ç–µ–Ω–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã'
                    elif '–∫—Ä–æ–≤–ª—è' in name.lower() or '–∫—Ä—ã—à' in name.lower():
                        category = '–ö—Ä–æ–≤–µ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã'
                    elif '–æ—Ç–¥–µ–ª–∫' in name.lower() or '—à—Ç—É–∫–∞—Ç—É—Ä' in name.lower():
                        category = '–û—Ç–¥–µ–ª–æ—á–Ω—ã–µ —Ä–∞–±–æ—Ç—ã'
                    elif '–±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π' in name.lower() or '–æ–∑–µ–ª–µ–Ω' in name.lower():
                        category = '–ë–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ'
                    
                    SpecificationItem.objects.create(
                        specification=spec,
                        code=code[:50],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                        name=name[:500],
                        unit=unit[:20],
                        quantity=quantity,
                        unit_price=unit_price,
                        total_price=total_price,
                        category=category[:200],
                        order=idx
                    )
                    items_created += 1
                
                print(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {items_created} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏")
                self.stats['spec_items'] += items_created
                
            except Exception as e:
                error = f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {file_path.name}: {e}"
                print(f"‚ùå {error}")
                self.stats['errors'].append(error)
    
    def import_schedules(self):
        """–ò–º–ø–æ—Ä—Ç —Å–µ—Ç–µ–≤—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
        print(f"\nüìä –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ç–µ–≤—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –∏–∑ {self.schedule_folder}")
        
        if not self.schedule_folder.exists():
            self.stats['errors'].append(f"–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.schedule_folder}")
            return
        
        excel_files = list(self.schedule_folder.glob("*.xlsx"))
        print(f"–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(excel_files)}")
        
        for file_path in excel_files:
            try:
                print(f"\nüìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {file_path.name}")
                
                # –ß–∏—Ç–∞–µ–º –≤—Å–µ –ª–∏—Å—Ç—ã —Ñ–∞–π–ª–∞
                excel_file = pd.ExcelFile(file_path)
                print(f"–õ–∏—Å—Ç—ã –≤ —Ñ–∞–π–ª–µ: {excel_file.sheet_names}")
                
                # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –ø–µ—Ä–≤–æ–º—É –ø—Ä–æ–µ–∫—Ç—É (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
                # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
                project = Project.objects.first()
                if not project:
                    error = "–ù–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
                    print(f"‚ùå {error}")
                    self.stats['errors'].append(error)
                    continue
                
                print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–µ–∫—Ç: {project.name}")
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
                schedule, created = NetworkSchedule.objects.get_or_create(
                    project=project,
                    defaults={'source_file': file_path.name}
                )
                
                if created:
                    print(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Å–µ—Ç–µ–≤–æ–π –≥—Ä–∞—Ñ–∏–∫")
                    self.stats['schedules'] += 1
                else:
                    # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏
                    schedule.tasks.all().delete()
                    print(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≥—Ä–∞—Ñ–∏–∫")
                
                # –ò—â–µ–º –ª–∏—Å—Ç —Å –∑–∞–¥–∞—á–∞–º–∏
                df = None
                for sheet_name in excel_file.sheet_names:
                    try:
                        temp_df = pd.read_excel(file_path, sheet_name=sheet_name)
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∏, –ø–æ—Ö–æ–∂–∏–µ –Ω–∞ –∑–∞–¥–∞—á–∏
                        columns = [col.lower() for col in temp_df.columns]
                        if any(keyword in ' '.join(columns) for keyword in ['–∑–∞–¥–∞—á', '—Ä–∞–±–æ—Ç', '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω', '–ø—Ä–æ–¥–æ–ª–∂–∏—Ç']):
                            df = temp_df
                            print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏—Å—Ç: {sheet_name}")
                            break
                    except:
                        continue
                
                if df is None:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç
                    df = pd.read_excel(file_path, sheet_name=0)
                
                # –ò–º–ø–æ—Ä—Ç –∑–∞–¥–∞—á –≥—Ä–∞—Ñ–∏–∫–∞
                tasks_created = 0
                for idx, row in df.iterrows():
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                    if idx < 2 or pd.isna(row.iloc[0]):
                        continue
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
                    task_id = str(row.iloc[0]) if not pd.isna(row.iloc[0]) else f"T{idx}"
                    name = str(row.iloc[1]) if len(df.columns) > 1 and not pd.isna(row.iloc[1]) else f"–ó–∞–¥–∞—á–∞ {task_id}"
                    
                    # –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                    duration_days = 1
                    if len(df.columns) > 2 and not pd.isna(row.iloc[2]):
                        try:
                            duration_days = int(float(str(row.iloc[2]).replace(',', '.')))
                        except:
                            duration_days = 1
                    
                    # –ù–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
                    early_start = idx * 2  # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                    early_finish = early_start + duration_days
                    
                    ScheduleTask.objects.create(
                        schedule=schedule,
                        task_id=task_id[:50],
                        name=name[:500],
                        duration_days=duration_days,
                        early_start=early_start,
                        early_finish=early_finish,
                        order=idx
                    )
                    tasks_created += 1
                
                print(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {tasks_created} –∑–∞–¥–∞—á –≥—Ä–∞—Ñ–∏–∫–∞")
                self.stats['schedule_tasks'] += tasks_created
                
            except Exception as e:
                error = f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {file_path.name}: {e}"
                print(f"‚ùå {error}")
                self.stats['errors'].append(error)
    
    def print_stats(self):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–º–ø–æ—Ä—Ç–∞"""
        print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ú–ü–û–†–¢–ê:")
        print(f"   ‚Ä¢ –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏: {self.stats['specifications']}")
        print(f"   ‚Ä¢ –≠–ª–µ–º–µ–Ω—Ç—ã —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π: {self.stats['spec_items']}")  
        print(f"   ‚Ä¢ –°–µ—Ç–µ–≤—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏: {self.stats['schedules']}")
        print(f"   ‚Ä¢ –ó–∞–¥–∞—á–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤: {self.stats['schedule_tasks']}")
        
        if self.stats['errors']:
            print(f"\n‚ùå –û–®–ò–ë–ö–ò ({len(self.stats['errors'])}):")
            for error in self.stats['errors'][:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                print(f"   ‚Ä¢ {error}")
            if len(self.stats['errors']) > 10:
                print(f"   ‚Ä¢ ... –∏ –µ—â—ë {len(self.stats['errors']) - 10} –æ—à–∏–±–æ–∫")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞"""
        print("üöÄ –ó–ê–ü–£–°–ö –ò–ú–ü–û–†–¢–ê –î–ê–ù–ù–´–• –ò–ó EXCEL")
        print("=" * 50)
        
        self.import_specifications()
        self.import_schedules()
        
        print("\n" + "=" * 50)
        self.print_stats()
        print("‚úÖ –ò–ú–ü–û–†–¢ –ó–ê–í–ï–†–®–ï–ù")


if __name__ == "__main__":
    importer = ExcelDataImporter()
    importer.run()